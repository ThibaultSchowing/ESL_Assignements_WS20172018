xlab = "Ozone",
ylab = "Radiation",
xlim = c(0,170),
ylim = c(0,335)
)
png(file = "scatterplot_matrices.png")
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
dev.off()
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
df = data.frame(ozone)
cor(df)
rssCustom <- function(predicted, real){
# Verify that number of predicted values and real values are the same
if(length(predicted) != length(real)){
print("Error: vectors are not the same size")
return("Error")
}
RSS <- 0
for(i in 1:length(predicted)){
#WRONG
RSS = RSS + ((real[i] - predicted[i])^2)
}
return(RSS)
}
model = lm(ozone ~ wind+temperature+radiation, data=ozone[trainset,])
summary(model)
Y_pred = predict(model, newdata = ozone[testset,])
rssValue = rssCustom(Y_pred, ozone[testset,1])
print(rssValue)
deviance(model)
sum(resid(model)^2)
anova(model)
with(summary(model), df[2] * sigma^2)
library("FNN")
train = ozone[trainset,]
test = ozone[testset,]
y = ozone[trainset,1]
nb_neighbour = 30
results <- matrix(nrow=nb_neighbour, ncol=2)
for (k in 1:nb_neighbour){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k,1] = k
results[k,2] = rss_k
}
results
plot(results, xlab="k neighbours", ylab="RSS")
res = knn.reg(train, test = test, y, k = 5)
rss_k = rssCustom(test$ozone,res$pred)
plot(rss_k)
load("ozone.RData")
str(ozone)
cor(ozone)
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignement 1/R_Code'
setwd(workingDirectory)
load('ozone.RData')
ozone
ls(ozone)
str(ozone)
summary(ozone)
dim(ozone)
length(ozone)
range(ozone)
colnames(ozone)
cor(df)
df = data.frame(ozone)
cor(df)
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignement 1/R_Code'
setwd(workingDirectory)
load('ozone.RData')
cor(ozone)
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignement 1/R_Code'
setwd(workingDirectory)
load('ozone.RData')
ozone
ls(ozone)
str(ozone)
summary(ozone)
dim(ozone)
length(ozone)
range(ozone)
colnames(ozone)
length(testset)
length(trainset)
dim(ozone)
apply(ozone, 2, mean)
apply(ozone, 2, range)
apply(ozone, 2, sd)
plot(x = ozone[,1],
y = ozone[,2],
main = "Ozone vs Radiation",
xlab = "Ozone",
ylab = "Radiation",
xlim = c(0,170),
ylim = c(0,335)
)
png(file = "scatterplot_matrices.png")
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
dev.off()
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
ozone = data.frame(ozone)
cor(ozone)
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignement 1/R_Code'
setwd(workingDirectory)
load('ozone.RData')
ozone
ls(ozone)
str(ozone)
summary(ozone)
dim(ozone)
length(ozone)
range(ozone)
colnames(ozone)
length(testset)
length(trainset)
dim(ozone)
apply(ozone, 2, mean)
apply(ozone, 2, range)
apply(ozone, 2, sd)
plot(x = ozone[,1],
y = ozone[,2],
main = "Ozone vs Radiation",
xlab = "Ozone",
ylab = "Radiation",
xlim = c(0,170),
ylim = c(0,335)
)
png(file = "scatterplot_matrices.png")
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
dev.off()
ozone = data.frame(ozone)
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
cor(ozone)
rssCustom <- function(predicted, real){
# Verify that number of predicted values and real values are the same
if(length(predicted) != length(real)){
print("Error: vectors are not the same size")
return("Error")
}
RSS <- 0
for(i in 1:length(predicted)){
#WRONG
RSS = RSS + ((real[i] - predicted[i])^2)
}
return(RSS)
}
model = lm(ozone ~ wind+temperature+radiation, data=ozone[trainset,])
summary(model)
Y_pred = predict(model, newdata = ozone[testset,])
rssValue = rssCustom(Y_pred, ozone[testset,1])
print(rssValue)
deviance(model)
sum(resid(model)^2)
anova(model)
with(summary(model), df[2] * sigma^2)
library("FNN")
train = ozone[trainset,]
test = ozone[testset,]
model = lm(ozone ~ wind+temperature+radiation, data=ozone[trainset,])
summary(model)
Y_pred = predict(model, newdata = ozone[testset,])
rssValue = RSS(Y_pred, ozone[testset,1])
RSS <- function(y_true,y_predicted){
#print(dim(y_true))
res <- sum((y_true - y_predicted)^2)
return(res)
}
rssValue = RSS(Y_pred, ozone[testset,1])
print(rssValue)
deviance(model)
sum(resid(model)^2)
anova(model)
load("ozone.RData")
str(ozone)
lapply(ozone,range)
lapply(ozone, sd)
lapply(ozone, mean)
cor(ozone)
pairs(ozone)
RSS <- function(y_true,y_predicted){
#print(dim(y_true))
res <- sum((y_true - y_predicted)^2)
return(res)
}
pairs(ozone)
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
pairs(ozone)
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignement 1/R_Code'
setwd(workingDirectory)
load('ozone.RData')
pairs(ozone)
pairs(ozone,
main = "Scatterplot Matrix")
png(file = "scatterplot_matrices.png")
pairs(ozone,
main = "Scatterplot Matrix")
dev.off()
pairs(ozone,
main = "Scatterplot Matrix")
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignement 1/R_Code'
setwd(workingDirectory)
load('ozone.RData')
ozone
ls(ozone)
str(ozone)
summary(ozone)
dim(ozone)
length(ozone)
range(ozone)
colnames(ozone)
length(testset)
length(trainset)
dim(ozone)
apply(ozone, 2, mean)
apply(ozone, 2, range)
apply(ozone, 2, sd)
plot(x = ozone[,1],
y = ozone[,2],
main = "Ozone vs Radiation",
xlab = "Ozone",
ylab = "Radiation",
xlim = c(0,170),
ylim = c(0,335)
)
png(file = "scatterplot_matrices.png")
pairs(ozone,
main = "Scatterplot Matrix")
dev.off()
pairs(ozone,
main = "Scatterplot Matrix")
ozone = data.frame(ozone)
cor(ozone)
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignement 1/R_Code'
setwd(workingDirectory)
load('ozone.RData')
ozone
ls(ozone)
str(ozone)
summary(ozone)
dim(ozone)
length(ozone)
range(ozone)
colnames(ozone)
length(testset)
length(trainset)
dim(ozone)
apply(ozone, 2, mean)
apply(ozone, 2, range)
apply(ozone, 2, sd)
plot(x = ozone[,1],
y = ozone[,2],
main = "Ozone vs Radiation",
xlab = "Ozone",
ylab = "Radiation",
xlim = c(0,170),
ylim = c(0,335)
)
png(file = "scatterplot_matrices.png")
pairs(ozone,
main = "Scatterplot Matrix")
dev.off()
pairs(ozone,
main = "Scatterplot Matrix")
cor(ozone)
t_data <- ozone[trainset,]
lm_fit <- lm(t_data$ozone ~ t_data$radiation + t_data$temp + t_data$wind)
t_data <- ozone[testset,]
lm_predict <- predict(lm_fit, t_data[,2:4],interval="prediction")
RSS(t_data$ozone,lm_predict[,1])
RSS <- function(y_true,y_predicted){
#print(dim(y_true))
res <- sum((y_true - y_predicted)^2)
return(res)
}
t_data <- ozone[trainset,]
lm_fit <- lm(t_data$ozone ~ t_data$radiation + t_data$temp + t_data$wind)
t_data <- ozone[testset,]
lm_predict <- predict(lm_fit, t_data[,2:4],interval="prediction")
RSS(t_data$ozone,lm_predict[,1])
cor(lm_predict[,1],t_data$ozone)
plot(t_data[,1],lm_predict[,1],
pch = 15, col = c("red","blue"),
xlab = "true ozone values", ylab = "predicted ozone values")
legend(max(t_data[,1]), legend=c("true values","predicted values"),
col = c("red","blue"),
lty=1)
library(FNN)
k = 30
knn_predictions_train <- matrix(nrow=k,ncol=length(trainset))
knn_predictions_test <- matrix(nrow=k,ncol=length(testset))
for(i in 1:k){
knn_reg <- knn.reg(ozone[trainset,2:4],ozone[trainset,2:4],ozone[trainset,1], k=i)
knn_predictions_train[i,] <- knn_reg$pred
knn_reg2 <- knn.reg(ozone[trainset,2:4],ozone[testset,2:4],ozone[trainset,1], k=i)
knn_predictions_test[i,] <- knn_reg2$pred
}
rss_train <- vector(length = k)
rss_test <- vector(length = k)
for(i in 1:k){
#print(i)
rss_train[i] <- RSS(ozone[trainset,1],knn_predictions_train[i,])
}
for(i in 1:k){
rss_test[i] <- RSS(ozone[testset,1],knn_predictions_test[i,])
}
library(ggplot2)
plot_data <- data.frame(k=1:30,test=rss_test,train=rss_train)
ggplot(plot_data, aes(k)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
plot_data <- data.frame(k=1:30,test=rss_test/length((testset)),train=rss_train/length((trainset)))
ggplot(plot_data, aes(k)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
t_data <- ozone[trainset,]
lm_fit <- lm(t_data$ozone ~ t_data$radiation + t_data$temp + t_data$wind)
t_data <- ozone[testset,]
lm_predict <- predict(lm_fit, t_data[,2:4],interval="prediction")
RSS(t_data$ozone,lm_predict[,1])
cor(lm_predict[,1],t_data$ozone)
plot(t_data[,1],lm_predict[,1],
pch = 15, col = c("red","blue"),
xlab = "true ozone values", ylab = "predicted ozone values")
legend(max(t_data[,1]), legend=c("true values","predicted values"),
col = c("red","blue"),
lty=1)
plot(t_data[,1],lm_predict[,1],
pch = 15, col = c("red","blue"),
xlab = "true ozone values", ylab = "predicted ozone values")
legend(max(t_data[,1]), legend=c("true values","predicted values"),
col = c("red","blue"),
lty=1)
legend(max(t_data[,1]), legend=c("true values","predicted values"),
col = c("red","blue"),
lty=6)
legend(max(t_data[,1]), legend=c("true values","predicted values"),
col = c("red","blue"),
lty=66)
legend(max(t_data[,1]), legend=c("true values","predicted values"),
col = c("red","blue"),
lty=1)
RSS(t_data$ozone,lm_predict[,1])
cor(lm_predict[,1],t_data$ozone)
cor(lm_predict[,1],t_data$ozone)
library(FNN)
k = 30
knn_predictions_train <- matrix(nrow=k,ncol=length(trainset))
knn_predictions_test <- matrix(nrow=k,ncol=length(testset))
for(i in 1:k){
knn_reg <- knn.reg(ozone[trainset,2:4],ozone[trainset,2:4],ozone[trainset,1], k=i)
knn_predictions_train[i,] <- knn_reg$pred
knn_reg2 <- knn.reg(ozone[trainset,2:4],ozone[testset,2:4],ozone[trainset,1], k=i)
knn_predictions_test[i,] <- knn_reg2$pred
}
rss_train <- vector(length = k)
rss_test <- vector(length = k)
for(i in 1:k){
#print(i)
rss_train[i] <- RSS(ozone[trainset,1],knn_predictions_train[i,])
}
for(i in 1:k){
rss_test[i] <- RSS(ozone[testset,1],knn_predictions_test[i,])
}
library(ggplot2)
plot_data <- data.frame(k=1:30,test=rss_test,train=rss_train)
ggplot(plot_data, aes(k)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
plot_data <- data.frame(k=1:30,test=rss_test/length((testset)),train=rss_train/length((trainset)))
ggplot(plot_data, aes(k)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
plot_data <- data.frame(k=1:30,test=rss_test,train=rss_train)
ggplot(plot_data, aes(k), ylab("RSS")) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
plot_data <- data.frame(k=1:30,test=rss_test/length((testset)),train=rss_train/length((trainset)))
ggplot(plot_data, aes(k)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignement 1/R_Code'
setwd(workingDirectory)
load('ozone.RData')
ozone
ls(ozone)
str(ozone)
summary(ozone)
dim(ozone)
length(ozone)
range(ozone)
colnames(ozone)
length(testset)
length(trainset)
dim(ozone)
apply(ozone, 2, mean)
apply(ozone, 2, range)
apply(ozone, 2, sd)
plot(x = ozone[,1],
y = ozone[,2],
main = "Ozone vs Radiation",
xlab = "Ozone",
ylab = "Radiation",
xlim = c(0,170),
ylim = c(0,335)
)
png(file = "scatterplot_matrices.png")
pairs(ozone,
main = "Scatterplot Matrix")
dev.off()
pairs(ozone,
main = "Scatterplot Matrix")
cor(ozone)
RSS <- function(y_true,y_predicted){
#print(dim(y_true))
res <- sum((y_true - y_predicted)^2)
return(res)
}
t_data <- ozone[trainset,]
lm_fit <- lm(t_data$ozone ~ t_data$radiation + t_data$temp + t_data$wind)
t_data <- ozone[testset,]
lm_predict <- predict(lm_fit, t_data[,2:4],interval="prediction")
RSS(t_data$ozone,lm_predict[,1])
cor(lm_predict[,1],t_data$ozone)
plot(t_data[,1],lm_predict[,1],
pch = 15, col = c("red","blue"),
xlab = "true ozone values", ylab = "predicted ozone values")
legend(max(t_data[,1]), legend=c("true values","predicted values"),
col = c("red","blue"),
lty=1)
library(FNN)
k = 30
knn_predictions_train <- matrix(nrow=k,ncol=length(trainset))
knn_predictions_test <- matrix(nrow=k,ncol=length(testset))
for(i in 1:k){
knn_reg <- knn.reg(ozone[trainset,2:4],ozone[trainset,2:4],ozone[trainset,1], k=i)
knn_predictions_train[i,] <- knn_reg$pred
knn_reg2 <- knn.reg(ozone[trainset,2:4],ozone[testset,2:4],ozone[trainset,1], k=i)
knn_predictions_test[i,] <- knn_reg2$pred
}
rss_train <- vector(length = k)
rss_test <- vector(length = k)
for(i in 1:k){
#print(i)
rss_train[i] <- RSS(ozone[trainset,1],knn_predictions_train[i,])
}
for(i in 1:k){
rss_test[i] <- RSS(ozone[testset,1],knn_predictions_test[i,])
}
library(ggplot2)
plot_data <- data.frame(k=1:30,test=rss_test,train=rss_train)
ggplot(plot_data, aes(k), ylab("RSS")) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
ggplot(plot_data, aes(k), ylab="RSS") +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
plot_data <- data.frame(k=1:30,test=rss_test,train=rss_train)
ggplot(plot_data, aes(k), ylab="RSS") +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
ggplot(plot_data, aes(k), ylab="RSS") +
geom_line(aes(y=train, color = "caca")) +
geom_line(aes(y=test, color = "test"))
ggplot(plot_data, aes(k, RSS)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
ggplot(plot_data, aes(k, RSS)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
plot_data <- data.frame(k=1:30,test=rss_test/length((testset)),train=rss_train/length((trainset)))
ggplot(plot_data, aes(k, RSS)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
plot_data <- data.frame(k=1:30,test=rss_test/length((testset)),train=rss_train/length((trainset)))
ggplot(plot_data, aes(k, Normalized RSS)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
ggplot(plot_data, aes(k, Normalized_RSS)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
library(ggplot2)
plot_data <- data.frame(k=1:30,test=rss_test,train=rss_train)
ggplot(plot_data, aes(k, RSS)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
plot_data <- data.frame(k=1:30,test=rss_test/length((testset)),train=rss_train/length((trainset)))
ggplot(plot_data, aes(k, Normalized_RSS)) +
geom_line(aes(y=train, color = "train")) +
geom_line(aes(y=test, color = "test"))
