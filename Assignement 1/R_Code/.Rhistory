`%ni%` <- Negate(`%in%`)
data = subset(data,select = names(data) %ni% to.remove)
varCoeff <- round(apply(data,2,sd)/apply(data,2,mean)*100,2)
df10 = data[,varCoeff > 10]
require(ggplot2)
require(GGally)
require(CCA)
inputs <- df10[,1:25]
outputs <- df10[,25:29]
cc1 <- cc(inputs, outputs)
rm(list=ls())
library(plsdepot)
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
summary(data)
dim(data)
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
summary(data)
dim(data)
inputs <- data[,1:71]
output <- data[,72:83]
outputs <- data[,72:83]
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
library(plsdepot)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
install.packages("ade4")
library(ade4)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
rm(list=ls())
library(plsdepot)
library(ade4)
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
inputs <- data[,1:71]
outputs <- data[,72:83]
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
find(mbpls)
find("mbpls")
getAnywhere("mbpls")
clear
RSiteSearch("mbpls")
mbpls.fast(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
library(ade4)
rm(list=ls())
rm(list=ls())
library(plsdepot)
library(ade4)
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
inputs <- data[,1:71]
outputs <- data[,72:83]
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
library(ade4)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
remove.packages("ade4", lib="~/R/win-library/3.0")
install.packages("ade4")
install.packages("ade4")
library(ade4)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
install.packages("ade4", type="source")
install.packages("ade4", type = "source")
library(ade4)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
remove.packages("ade4", lib="~/R/win-library/3.0")
install.packages("C:\Users\thsch\Desktop\tmp\ade4")
install.packages("C:/Users/thsch/Desktop/tmp/ade4")
install.packages("ade4", repos = "https://github.com/cran/ade4", type="source")
install.packages("ade4", repos = "https://github.com/cran/ade4", type = "source")
#
# Elements of Statistical Learning WS2017/2018
# Assignement 1
#
#
#
#
#
# CAUTION: Reset the environement variables and set a specific working environement
rm(list=ls())
workingDirectory = 'C:/Users/thsch/Google Drive/SaarlandUniversity/_Cours/ESL/Assignement 1/Pratique'
setwd(workingDirectory)
getwd()
#=========================================
#  B
#=========================================
load('ozone.RData')
ozone
ls(ozone)
str(ozone)
summary(ozone)
dim(ozone)
length(ozone)
range(ozone)
colnames(ozone)
# Ozone: continuous
# Radiation: continuous
# Temperature: continuous
# Wind: continuous
#=========================================
#  C
#=========================================
# Data sizes
length(testset)
length(trainset)
dim(ozone)
# Testset: 31
# Trainset: 80
# Total: 111 observations
# Mean of the columns
apply(ozone, 2, mean)
# Range of the columns
apply(ozone, 2, range)
# Standart Deviation of the columns
apply(ozone, 2, sd)
#=========================================
#  D
#=========================================
# Scatterplots
plot(x = ozone[,1],
y = ozone[,2],
main = "Ozone vs Radiation",
xlab = "Ozone",
ylab = "Radiation",
xlim = c(0,170),
ylim = c(0,335)
)
# Helpfull source: https://www.tutorialspoint.com/r/r_scatterplots.htm
# Give the chart file a name. If you don't want to save the file, ignore the png() and the dev.off().
png(file = "scatterplot_matrices.png")
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
# Save the file.
dev.off()
# Pearson Correlation
df = data.frame(ozone)
cor(df)
#=========================================
#  E
#=========================================
# RSS implementation
# Source: https://en.wikipedia.org/wiki/Residual_sum_of_squares
rssCustom <- function(predicted, real){
# Verify that number of predicted values and real values are the same
if(length(predicted) != length(real)){
print("Error: vectors are not the same size")
return("Error")
}
RSS <- 0
for(i in 1:length(predicted)){
#WRONG
RSS = RSS + ((predicted[i] - real[i])^2)
}
return(RSS)
}
#=========================================
#  F
#=========================================
model = lm(ozone ~ wind+temperature+radiation, data=ozone[trainset,])
summary(model)
Y_pred = predict(model, newdata = ozone[testset,])
# Report the RSS
rssValue = rssCustom(Y_pred, ozone[testset,1])
print(rssValue)
deviance(model)
sum(resid(model)^2)
anova(model)
with(summary(model), df[2] * sigma^2)
# Report the Correlation ???
plot(x = ozone[,1],
y = ozone[,2],
main = "Ozone vs Radiation",
xlab = "Ozone",
ylab = "Radiation",
xlim = c(0,170),
ylim = c(0,335)
)
png(file = "scatterplot_matrices.png")
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
dev.off()
pairs(~ozone+radiation+temperature+wind,data = ozone,
main = "Scatterplot Matrix")
install.packages("FNN")
library("FNN")
ozone[trainset,]
ozone[trainset,1]
train = ozone[trainset,]
test = ozone[testset,]
y = ozone[trainset,1]
train
train = ozone[trainset,2:4]
train
knn.reg(train, test = test, y, k = 10)
train
test
train = ozone[trainset,2:4,]
train = ozone[trainset,]
test = ozone[testset,]
y = ozone[trainset,1]
knn.reg(train, test = test, y, k = 10)
result = knn.reg(train, test = test, y, k = 10)
result
rssCustom <- function(predicted, real){
# Verify that number of predicted values and real values are the same
if(length(predicted) != length(real)){
print("Error: vectors are not the same size")
return("Error")
}
RSS <- 0
for(i in 1:length(predicted)){
#WRONG
RSS = RSS + ((real[i] - predicted[i])^2)
}
return(RSS)
}
res = knn.reg(train, test = test, y, k = 5)
rss_k = rssCustom(y,res)
test
test[,1]
rss_k = rssCustom(test[,1],res)
res
test
length(test)
length(test[,1])
length(res)
res
res[2]
rss_k = rssCustom(test[,1],res[1])
rss_k = rssCustom(test[,1],res[1,::])
rss_k = rssCustom(test[,1],res[1,])
rss_k = rssCustom(test[,1],res[1,:])
res[1]
rss_k = rssCustom(test[,1],res[,1])
dim(res)
res
dim(res)
size(res)
typeof(res)
print(res)
res[1]
res[2]
res[3]
res[1,]
res[,1]
rss_k = rssCustom(test$ozone,res$pred)
rss_k
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
print(rss_k)
}
print("k = ", k, "    Rss = ", rss_k)
print("k = " + k + "    Rss = " + rss_k)
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("k = " + k + "    Rss = " + rss_k)
}
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("k = " , k , "    Rss = " , rss_k)
}
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
}
results <- list("k","RSS")
results <- list("k","RSS")
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k] = [k][rss_k]
}
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[[k]] <- k
}
results
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[[k]] <- k
results[[k]] <- rss_k
}
results
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k] <- k
results[k] <- rss_k
}
results
plot(results)
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k][1] <- k
results[k][2] <- rss_k
plot(results)
}
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k][1] <- k
results[k][2] <- rss_k
}
results
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k,1] <- k
results[k,2] <- rss_k
}
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k][1] <- k
results[k][2] <- rss_k
}
results
warning()
warnings()
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k][1] <- k
results[k][2] <- rss_k
}
warnings()
results[]
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k] <- list(k, rss_k)
}
results
results <- list()
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[[k]] <- list(k, rss_k)
}
results
results[1,1]
results[1][1]
results <- matrix(nrow=30, ncol=2)
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k,1] = k
results[k,2 = rss_k]
}
for (k in 1:30){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k,1] = k
results[k,2] = rss_k
}
results
plot(results)
plot(results, xlab="k neighbours", ylab="RSS")
nb_neighbour = 30
results <- matrix(nrow=nb_neighbour, ncol=2)
for (k in 1:nb_neighbour){
# KNN with k neighbours
res = knn.reg(train, test = test, y, k = k)
# Calculate RSS (Verify function)
#
# RSS inputs: - Real values
#             - Predicted values
rss_k = rssCustom(test$ozone,res$pred)
cat("\n\nk = " , k , "    Rss = " , rss_k)
results[k,1] = k
results[k,2] = rss_k
}
results
plot(results, xlab="k neighbours", ylab="RSS")
res = knn.reg(train, test = test, y, k = 5)
rss_k = rssCustom(test$ozone,res$pred)
