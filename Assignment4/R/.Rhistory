install.packages(c("caret", "snowfall"))
library("caret", lib.loc="~/R/win-library/3.0")
library("gtools", lib.loc="~/R/win-library/3.0")
install.packages("caret")
library("caret", lib.loc="~/R/win-library/3.0")
windows()
rm(list=ls())
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(data,select = names(data) %ni% to.remove)
require(ggplot2)
require(GGally)
require(CCA)
inputs <- data[,1:71]
outputs <- data[,72:83]
ggpairs(outputs)
cc1 <- cc(inputs, outputs)
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(data,select = names(data) %ni% to.remove)
varCoeff <- round(apply(data,2,sd)/apply(data,2,mean)*100,2)
df10 = data[,varCoeff > 10]
summary(df10)
dim(df10)
inputs <- df10[,1:25]
outputs <- df10[,25:29]
cc1 <- cc(inputs, outputs)
library(plsdepot)
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
to.remove <- c("SICA","year","Category","PuntajeCatador","TazaLimpia","Balance","Uniformidad","Dulzor","SaborResidual","Sabor","Cuerpo","Acidez","Aroma.Fragancia","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
summary(data)
pls1 = plsreg1(data[,1:ncol(data)-1], data[, ncol(data), drop = FALSE], comps = 3)
plot(pls1)
pls1$x.scores
pls1$R2
plot(data$PuntajeTotal, pls1$y.pred,  xlab="Original", ylab = "Predicted", ylim= c(40,82))
title("Comparison of responses", cex.main = 0.9)
abline(a = 0, b = 1, col = "gray85", lwd = 2)
to.remove <- c("SICA","year","Category","PuntajeCatador","TazaLimpia","Balance","Uniformidad","Dulzor","SaborResidual","Sabor","Cuerpo","PuntajeTotal","Aroma.Fragancia","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
summary(data)
pls1 = plsreg1(data[,1:ncol(data)-1], data[, ncol(data), drop = FALSE], comps = 3)
plot(pls1)
pls1$x.scores
pls1$R2
plot(data$Acidez, pls1$y.pred,  xlab="Original", ylab = "Predicted", ylim = c(5,8.7))
title("Comparison of responses", cex.main = 0.9)
abline(a = 0, b = 1, col = "gray85", lwd = 2)
to.remove <- c("SICA","year","Category","PuntajeCatador","TazaLimpia","Balance","Uniformidad","Acidez","SaborResidual","Sabor","Cuerpo","PuntajeTotal","Aroma.Fragancia","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
summary(data)
pls1 = plsreg1(data[,1:ncol(data)-1], data[, ncol(data), drop = FALSE], comps = 3)
plot(pls1)
pls1$x.scores
pls1$R2
plot(data$Dulzor, pls1$y.pred,  xlab="Original", ylab = "Predicted",ylim = c(0,11))
title("Comparison of responses", cex.main = 0.9)
abline(a = 0, b = 1, col = "gray85", lwd = 2)
to.remove <- c("SICA","year","PuntajeTotal","PuntajeCatador","TazaLimpia","Balance","Uniformidad","Dulzor","SaborResidual","Sabor","Cuerpo","Acidez","Aroma.Fragancia","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
summary(data)
pls1 = plsreg1(data[,1:ncol(data)-1], data[, ncol(data), drop = FALSE], comps = 3 )
plot(pls1)
postResample(pls1$y,pls1$y.pred)
plot(data$Category, pls1$y.pred, xlab="Original", ylab = "Predicted", ylim = c(2,4))
title("Comparison of responses", cex.main = 0.9)
abline(a = 0, b = 1, col = "gray85", lwd = 2)
rm(list=ls())
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(data,select = names(data) %ni% to.remove)
varCoeff <- round(apply(data,2,sd)/apply(data,2,mean)*100,2)
df10 = data[,varCoeff > 10]
require(ggplot2)
require(GGally)
require(CCA)
inputs <- df10[,1:25]
outputs <- df10[,25:29]
cc1 <- cc(inputs, outputs)
rm(list=ls())
library(plsdepot)
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
summary(data)
dim(data)
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
summary(data)
dim(data)
inputs <- data[,1:71]
output <- data[,72:83]
outputs <- data[,72:83]
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
library(plsdepot)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
install.packages("ade4")
library(ade4)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
rm(list=ls())
library(plsdepot)
library(ade4)
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
inputs <- data[,1:71]
outputs <- data[,72:83]
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
find(mbpls)
find("mbpls")
getAnywhere("mbpls")
clear
RSiteSearch("mbpls")
mbpls.fast(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
library(ade4)
rm(list=ls())
rm(list=ls())
library(plsdepot)
library(ade4)
dataset = read.csv("C:/Users/thsch/Desktop/Bachelor_Thesis_2017_Sources/Notebook/DataAnalysis/data/DataRisaralda_v2Numeric_Complete_utf-8.csv",
header=T,
row.names = 1,
sep=",",
stringsAsFactors = TRUE)
dataset   <- dataset[dataset$PuntajeTotal != 0,]
data = dataset
to.remove <- c("SICA","year","DefectosTotales")
`%ni%` <- Negate(`%in%`)
data = subset(dataset,select = names(dataset) %ni% to.remove)
inputs <- data[,1:71]
outputs <- data[,72:83]
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
library(ade4)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
remove.packages("ade4", lib="~/R/win-library/3.0")
install.packages("ade4")
install.packages("ade4")
library(ade4)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
install.packages("ade4", type="source")
install.packages("ade4", type = "source")
library(ade4)
mbpls(inputs, outputs, scale = TRUE, option = c("uniform", "none"), scannf = TRUE, nf = 2)
remove.packages("ade4", lib="~/R/win-library/3.0")
install.packages("C:\Users\thsch\Desktop\tmp\ade4")
install.packages("C:/Users/thsch/Desktop/tmp/ade4")
install.packages("ade4", repos = "https://github.com/cran/ade4", type="source")
install.packages("ade4", repos = "https://github.com/cran/ade4", type = "source")
rm(list=ls())
getwd()
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
setwd(getSrcDirectory()[1])
getSrcDirectory()
script.dir <- dirname(sys.frame(1)$ofile)
this.dir <- dirname(parent.frame(2)$ofile)
this.dir <- dirname(parent.frame(3)$ofile)
setwd(this.dir)
this.dir <- dirname(parent.frame(1)$ofile)
install.packages("MASS")
install.packages("ISLR")
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
?Boston
lm.fit = lm(medv~lstat, data=Boston)
lm.fit
summary(lm.fit)
names(lm.fit)
confint(lm.fit)
predict (lm.fit ,data.frame(lstat =(c(5 ,10 ,15) )), interval =" confidence ")
predict(lm.fit ,data.frame(lstat =(c(5 ,10 ,15) )), interval =" confidence ")
predict(lm.fit ,data.frame(lstat=(c(5 ,10 ,15))), interval ="confidence")
plot(lstat, medv)
attach(Boston)
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit, lwd=3,col="red")
plot(lstat, medv, col="red")
plot(lstat, medv, pch=20)
plut(lstat, medv, pch="+")
plut(lstat, medv, pch="+")
plot(lstat, medv, pch="+")
plot(1:20,1:20,pch=1:20)
par(mfrow = c(2,2))
plot(lm.fit)
plut(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
par(mfrow = c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plut(hatvalues(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
lm.fit = lm(medv~lstat + age, data = Boston)
summary(lm.fit)
lm.fit = lm(medv~.,data=Boston)
summary(lm.fit)
?summary.lm
install.packages("car")
library(car)
vif(lmlfit)
vif(lm.fit)
lm.fit1 = lm(medv~.-age,data=Boston)
summary(lm.fit1)
summary(lm(medv~lstat*age ,data=Boston ))
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit5=lm(medv~poly(lstat,5))
summary(lm.fit5)
summary(lm(medv~log(rm),data=Boston))
fix(Carseats)
names(Carseats)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age, data=Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
library(ISLR)
library(ggplot2)
var_cors <- cor(Auto[,-9])
pairs(var_cors)
ggplot(Auto, aes(cylinders, displacement)) + geom_point(position = "jitter", shape = 21)
ggplot(Auto, aes(weight, displacement)) + geom_point(shape = 21)
ggplot(Auto, aes(horsepower, displacement)) + geom_point(shape = 21)
ggplot(Auto, aes(mpg, weight)) + geom_point(shape = 21)
ggplot(Auto, aes(mpg, displacement)) + geom_point(shape = 21)
ggplot(Auto, aes(mpg, horsepower)) + geom_point(shape = 21)
reg_cyl <- lm(mpg ~ cylinders, data = Auto)
plot(predict(reg_cyl),residuals(reg_cyl))
summary(reg_cyl) # R2 = 0.6047, F-stat = 596.6, p < 2.2e-16
reg_disp <- lm(mpg ~ displacement, data = Auto)
plot(predict(reg_disp),residuals(reg_disp))
summary(reg_disp) # R2 = 0.6482, F-stat = 718.7, p < 2.2e-16
reg_hrsp <- lm(mpg ~ horsepower, data = Auto)
plot(predict(reg_hrsp),residuals(reg_hrsp))
summary(reg_hrsp) # R2 = 0.6059, F-stat: 599.7, p < 2.2e-16
reg_year <- lm(mpg ~ year, data = Auto)
plot(predict(reg_year),residuals(reg_year))
summary(reg_year) # R2 = 0.337, F-stat = 198.3, p < 2.2e-16
reg <- lm(mpg ~ .-name, data = Auto)
summary(reg)
plot(predict(reg), residuals(reg))
abline(h=0, col="red")
plot(hatvalues(reg))
which.max(hatvalues(reg))
lc1_reg <- lm(mpg ~ cylinders*weight, data = Auto)
lc2_reg <- lm(mpg ~ weight*year, data = Auto)
lc3_reg <- lm(mpg ~ year*cylinders, data = Auto)
summary(lc1_reg)
summary(lc2_reg)
summary(lc3_reg)
nl1_reg <- lm(mpg ~ displacement+log(displacement), data = Auto)
nl2_reg <- lm(mpg ~ displacement+sqrt(displacement), data = Auto)
nl3_reg <- lm(mpg ~ displacement+I(displacement^2), data = Auto)
summary(nl1_reg)
summary(nl2_reg)
summary(nl3_reg)
var_cors <- cor(Auto[,-9])
pairs(var_cors)
nl4_reg <- lm(displacement ~ mpg +I(mpg^2), data = Auto)
summary(nl4_reg)
nl4_reg <- lm(mpg ~ displacement , data = Auto)
summary(nl4_reg)
lc1_reg <- lm(mpg ~ cylinders*weight, data = Auto)
lc2_reg <- lm(mpg ~ weight*year, data = Auto)
lc3_reg <- lm(mpg ~ year*cylinders, data = Auto)
nl1_reg <- lm(mpg ~ displacement+log(displacement), data = Auto)
nl2_reg <- lm(mpg ~ displacement+sqrt(displacement), data = Auto)
nl3_reg <- lm(mpg ~ displacement+I(displacement^2), data = Auto)
summary(lc1_reg)
summary(lc2_reg)
summary(lc3_reg)
summary(nl1_reg)
summary(nl2_reg)
summary(nl3_reg)
plot(nl1_reg)
plot(nl2_reg)
plot(nl3_reg)
plot(lc1_reg)
plot(lc2_reg)
plot(lc3_reg)
library(ISLR)
library(ggplot2)
var_cors <- cor(Auto[,-9])
pairs(var_cors)
ggplot(Auto, aes(cylinders, displacement)) + geom_point(position = "jitter", shape = 21)
ggplot(Auto, aes(weight, displacement)) + geom_point(shape = 21)
ggplot(Auto, aes(horsepower, displacement)) + geom_point(shape = 21)
ggplot(Auto, aes(mpg, weight)) + geom_point(shape = 21)
ggplot(Auto, aes(mpg, displacement)) + geom_point(shape = 21)
ggplot(Auto, aes(mpg, horsepower)) + geom_point(shape = 21)
reg_cyl <- lm(mpg ~ cylinders, data = Auto)
plot(predict(reg_cyl),residuals(reg_cyl))
summary(reg_cyl) # R2 = 0.6047, F-stat = 596.6, p < 2.2e-16
reg_disp <- lm(mpg ~ displacement, data = Auto)
rm(list=ls())
library(MASS)
library("leaps")
setwd("C:/Users/thsch/Desktop/ESL_Assignements_WS20172018/Assignment4/R")
data = read.table("prostate.txt")
data_norm = scale(data[, 1:(length(data) - 1)])
round(apply(data_norm, 2, mean))
apply(data_norm, 2, sd)
train.rows = which(data$train)
test.rows = which(!data$train)
data_train = data_norm[train.rows, ]
data_test = data_norm[test.rows, ]
regfit.full = regsubsets(lpsa ~ ., as.data.frame(data_train))
reg.summary = summary(regfit.full)
reg.summary
plot(reg.summary$rsq, main = "R2", xlab = "Number of features", ylab="R2", type="l")
plot(reg.summary$adjr2, main = "Adjusted R2", xlab = "Number of features", ylab = "Adjusted RSq", type="l")
plot(reg.summary$cp, main = "Cp", xlab = "Number of features", ylab="Cp", type="l")
plot(reg.summary$bic, main = "BIC", xlab = "Number of features", ylab = "BIC", type="l")
which.max(reg.summary$adjr2)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
x.train = data_train[, -7]
y.train = data_train[, 8]
x.test = data_test[, -7]
y.test = data_test[, 8]
model <- lm(y.train~x.train,  data=as.data.frame(data_train))
fit.train = predict(model,as.data.frame(x.train),as.data.frame(y.train))
library(glmnet)
grid=10^seq(10, -2,length =100)
ridge.mod = glmnet(x.train,y.train,alpha =0, lambda =grid)
summary(ridge.mod)
par(mfrow=c(1,1))
matplot(grid, t(coef(ridge.mod)), type="l", col=seq_len(ncol(t(coef(ridge.mod)))),
main = "Ridge models", xlab="lambda", ylab="Coefficient", xlim=c(0,10))
legend("topright", legend = row.names(coef(ridge.mod)), col=seq_len(ncol(t(coef(ridge.mod)))),
cex=0.8, fill=seq_len(ncol(t(coef(ridge.mod)))))
plot(ridge.mod)
